{"ast":null,"code":"// support provided by group 25-thx!\nexport const LOGIN = 'LOGIN';\nexport const login = (name, email) => ({\n  type: LOGIN,\n  name,\n  email\n});\nexport const EMAIL_HASH = 'EMAIL_HASH';\nexport const hashRequest = emailHash => ({\n  type: EMAIL_HASH,\n  hash: emailHash\n});\nexport const TOKEN_REQUEST = 'TOKEN_REQUEST';\nexport const tokenRequest = token => ({\n  type: TOKEN_REQUEST,\n  token\n});\nexport const REQUEST_STARTED = 'REQUEST_STARTED';\nexport const requestStarted = () => ({\n  type: REQUEST_STARTED\n});\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\nexport const requestFail = error => ({\n  type: REQUEST_FAIL,\n  error\n});\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\nexport const fetchQuestionsSuccess = payload => ({\n  type: 'FETCH_QUESTIONS_SUCCESS',\n  payload\n});\nexport const UPDATE_ASSERTIONS = 'UPDATE_ASSERTIONS';\nexport const updateAssertions = () => ({\n  type: UPDATE_ASSERTIONS\n});\nexport const RESET_ASSERTIONS = 'RESET_ASSERTIONS';\nexport const resetAssertions = () => ({\n  type: RESET_ASSERTIONS\n});\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const updateScore = (timer, difficulty) => {\n  console.log('ACTION', difficulty);\n  return {\n    type: UPDATE_SCORE,\n    payload: {\n      timer,\n      difficulty\n    }\n  };\n};\nexport const UPDATE_RANDOM_ANSWERS = 'UPDATE_RANDOM_ANSWERS';\nexport const updateRandomAnswers = payload => ({\n  type: UPDATE_RANDOM_ANSWERS,\n  payload\n});\nexport function fetchToken() {\n  return async dispatch => {\n    try {\n      dispatch(requestStarted());\n      const fetchAPI = await fetch('https://opentdb.com/api_token.php?command=request');\n      const token = await fetchAPI.json();\n      localStorage.setItem('token', token.token);\n      console.log(token);\n      dispatch(tokenRequest(token));\n    } catch (erro) {\n      dispatch(requestFail());\n    }\n  };\n}\nexport const fetchQuestions = token => async dispatch => {\n  const endpoint = `https://opentdb.com/api.php?amount=5&token=${token}`;\n  const response = await fetch(endpoint);\n  const data = await response.json();\n  dispatch(requestStarted());\n\n  try {\n    dispatch(fetchQuestionsSuccess(data));\n  } catch (error) {\n    dispatch(requestFail(error));\n  }\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trivia-react-redux/src/actions/index.js"],"names":["LOGIN","login","name","email","type","EMAIL_HASH","hashRequest","emailHash","hash","TOKEN_REQUEST","tokenRequest","token","REQUEST_STARTED","requestStarted","REQUEST_FAIL","requestFail","error","FETCH_QUESTIONS_SUCCESS","fetchQuestionsSuccess","payload","UPDATE_ASSERTIONS","updateAssertions","RESET_ASSERTIONS","resetAssertions","UPDATE_SCORE","updateScore","timer","difficulty","console","log","UPDATE_RANDOM_ANSWERS","updateRandomAnswers","fetchToken","dispatch","fetchAPI","fetch","json","localStorage","setItem","erro","fetchQuestions","endpoint","response","data"],"mappings":"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","sourcesContent":["// support provided by group 25-thx!\nexport const LOGIN = 'LOGIN';\nexport const login = (name, email) => ({\n  type: LOGIN,\n  name,\n  email,\n});\n\nexport const EMAIL_HASH = 'EMAIL_HASH';\nexport const hashRequest = (emailHash) => ({\n  type: EMAIL_HASH,\n  hash: emailHash,\n});\n\nexport const TOKEN_REQUEST = 'TOKEN_REQUEST';\nexport const tokenRequest = (token) => ({ type: TOKEN_REQUEST, token });\n\nexport const REQUEST_STARTED = 'REQUEST_STARTED';\nexport const requestStarted = () => ({ type: REQUEST_STARTED });\n\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\nexport const requestFail = (error) => ({ type: REQUEST_FAIL, error });\n\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\nexport const fetchQuestionsSuccess = (payload) => (\n  { type: 'FETCH_QUESTIONS_SUCCESS', payload });\n\nexport const UPDATE_ASSERTIONS = 'UPDATE_ASSERTIONS';\nexport const updateAssertions = () => ({ type: UPDATE_ASSERTIONS });\n\nexport const RESET_ASSERTIONS = 'RESET_ASSERTIONS';\nexport const resetAssertions = () => ({ type: RESET_ASSERTIONS });\n\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const updateScore = (timer, difficulty) => {\n  console.log('ACTION', difficulty);\n  return {\n    type: UPDATE_SCORE,\n    payload: { timer, difficulty },\n  };\n};\n\nexport const UPDATE_RANDOM_ANSWERS = 'UPDATE_RANDOM_ANSWERS';\nexport const updateRandomAnswers = (payload) => (\n  { type: UPDATE_RANDOM_ANSWERS, payload });\n\nexport function fetchToken() {\n  return async (dispatch) => {\n    try {\n      dispatch(requestStarted());\n      const fetchAPI = await fetch('https://opentdb.com/api_token.php?command=request');\n      const token = await fetchAPI.json();\n      localStorage.setItem('token', token.token);\n      console.log(token);\n      dispatch(tokenRequest(token));\n    } catch (erro) {\n      dispatch(requestFail());\n    }\n  };\n}\n\nexport const fetchQuestions = (token) => async (dispatch) => {\n  const endpoint = `https://opentdb.com/api.php?amount=5&token=${token}`;\n  const response = await fetch(endpoint);\n  const data = await response.json();\n  dispatch(requestStarted());\n  try {\n    dispatch(fetchQuestionsSuccess(data));\n  } catch (error) {\n    dispatch(requestFail(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}