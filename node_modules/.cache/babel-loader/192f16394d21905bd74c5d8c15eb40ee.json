{"ast":null,"code":"import _objectSpread from \"/home/eric/sd-07-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/eric/sd-07-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, updateAssertions, updateRandomAnswers, updateScore } from '../actions';\nimport GameHeader from '../components/GameHeader';\nimport { setStorage, getStorage } from '../services';\nimport '../style/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestion: 0,\n      nextQuestion: false,\n      disabledTimeOut: false,\n      timer: 30\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.disableQuestion = this.disableQuestion.bind(this);\n    this.saveRanking = this.saveRanking.bind(this);\n    this.playerLocalStorage = this.playerLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    this.timeOut();\n    const _this$props = this.props,\n          requestQuestions = _this$props.requestQuestions,\n          token = _this$props.token;\n    await requestQuestions(token);\n    this.playerLocalStorage();\n  }\n\n  shuffle(answers) {\n    for (let i = answers.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      var _ref = [answers[j], answers[i]];\n      answers[i] = _ref[0];\n      answers[j] = _ref[1];\n    }\n\n    return answers;\n  }\n\n  async handleAnswer({\n    target: {\n      name\n    }\n  }, difficulty) {\n    console.log('handle', difficulty);\n    const _this$props2 = this.props,\n          assertionsAction = _this$props2.assertionsAction,\n          scoreAction = _this$props2.scoreAction;\n    const timer = this.state.timer;\n    const answerButtons = document.querySelectorAll('.hidden');\n    answerButtons.forEach(button => button.classList.remove('hidden'));\n\n    if (name === 'correct') {\n      await scoreAction(timer, difficulty);\n      await assertionsAction();\n    }\n\n    this.setState({\n      nextQuestion: true\n    });\n    this.playerLocalStorage();\n  }\n\n  handleNext() {\n    const _this$props3 = this.props,\n          questions = _this$props3.questions,\n          history = _this$props3.history,\n          assertions = _this$props3.assertions,\n          randomAnswersAction = _this$props3.randomAnswersAction;\n    const currentQuestion = this.state.currentQuestion;\n    const state = getStorage('state');\n\n    const mockData = _objectSpread({}, state, {\n      player: _objectSpread({}, state.player, {\n        score: assertions,\n        assertions\n      })\n    });\n\n    setStorage('state', mockData);\n\n    if (currentQuestion !== questions.length - 1) {\n      randomAnswersAction({\n        randomAnswers: [],\n        sorted: false\n      });\n      this.setState(prevSate => ({\n        currentQuestion: prevSate.currentQuestion + 1,\n        nextQuestion: false,\n        timer: 30\n      }));\n    } else {\n      this.saveRanking();\n      history.push('/feedbacks');\n    }\n  }\n\n  saveRanking() {\n    const ranking = getStorage('ranking');\n    const _this$props4 = this.props,\n          hash = _this$props4.hash,\n          name = _this$props4.name,\n          assertions = _this$props4.assertions;\n    const src = `https://www.gravatar.com/avatar/${hash}`;\n\n    if (!ranking) {\n      const firstRanking = [{\n        name,\n        score: assertions,\n        picture: src\n      }];\n      setStorage('ranking', firstRanking);\n    } else {\n      const rankinkNew = {\n        name,\n        score: assertions,\n        picture: src\n      };\n      ranking.push(rankinkNew);\n      setStorage('ranking', ranking);\n    }\n  }\n\n  disableQuestion() {\n    const timer = this.state.timer;\n    console.log('disableQuestion');\n\n    if (timer <= 0) {\n      this.setState({\n        disabledTimeOut: true\n      });\n    }\n  }\n\n  timeOut() {\n    const ONE_SEC = 1000;\n    console.log('timeOut');\n    setInterval(() => {\n      this.setState(state => ({\n        timer: state.timer - 1\n      }), this.disableQuestion);\n    }, ONE_SEC);\n  }\n\n  playerLocalStorage() {\n    const _this$props5 = this.props,\n          name = _this$props5.name,\n          assertions = _this$props5.assertions,\n          email = _this$props5.email,\n          score = _this$props5.score;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail: email\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    const _this$props6 = this.props,\n          questions = _this$props6.questions,\n          randomAnswersAction = _this$props6.randomAnswersAction,\n          randomAnswers = _this$props6.randomAnswers,\n          sorted = _this$props6.sorted;\n    const _this$state = this.state,\n          currentQuestion = _this$state.currentQuestion,\n          nextQuestion = _this$state.nextQuestion,\n          timer = _this$state.timer,\n          disabledTimeOut = _this$state.disabledTimeOut;\n    if (questions === undefined) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Loading...\");\n    const question = questions[currentQuestion];\n    const correctAnswer = question.correct_answer,\n          incorrectAnswers = question.incorrect_answers,\n          difficulty = question.difficulty;\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const taggedAnswers = question.type !== 'boolean' ? [{\n      correct: true,\n      answer: answers[0],\n      difficulty\n    }, {\n      correct: false,\n      answer: answers[1],\n      index: 0,\n      difficulty\n    }, {\n      correct: false,\n      answer: answers[2],\n      index: 1,\n      difficulty\n    }, {\n      correct: false,\n      answer: answers[3],\n      index: 2,\n      difficulty\n    }] : [{\n      correct: true,\n      answer: answers[0],\n      difficulty\n    }, {\n      correct: false,\n      answer: answers[1],\n      index: 0,\n      difficulty\n    }];\n    const randomAnswersLocal = sorted ? randomAnswers : this.shuffle(taggedAnswers);\n    randomAnswersAction({\n      randomAnswers: randomAnswersLocal,\n      sorted: true\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(GameHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      key: question.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      key: question.category,\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, question.category), React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, question.question), randomAnswersLocal.map(answer => React.createElement(\"button\", {\n      className: `hidden ${answer.correct ? 'rightGreen' : 'wrongRed'}`,\n      type: \"button\",\n      key: answer.answer,\n      name: answer.correct ? 'correct' : 'wrong',\n      \"data-testid\": answer.correct ? 'correct-answer' : `wrong-answer-${answer.index}`,\n      onClick: e => this.handleAnswer(e, answer.difficulty),\n      disabled: disabledTimeOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, answer.answer)), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleNext,\n      style: nextQuestion ? {\n        visibility: 'visible'\n      } : {\n        visibility: 'hidden'\n      },\n      disabled: disabledTimeOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Pr\\xF3xima pergunta\"), !disabledTimeOut && timer));\n  }\n\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  questions: PropTypes.shape({\n    length: PropTypes.number.isRequired\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  assertionsAction: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired,\n  hash: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  scoreAction: PropTypes.func.isRequired,\n  randomAnswersAction: PropTypes.func.isRequired,\n  randomAnswers: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sorted: PropTypes.bool.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: questions => dispatch(fetchQuestions(questions)),\n  assertionsAction: () => dispatch(updateAssertions()),\n  scoreAction: (payload, difficulty) => dispatch(updateScore(payload, difficulty)),\n  randomAnswersAction: payload => dispatch(updateRandomAnswers(payload))\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.game.isLoading,\n  questions: state.game.questions.results,\n  token: state.login.token,\n  name: state.login.name,\n  email: state.login.email,\n  score: state.game.score,\n  assertions: state.game.assertions,\n  hash: state.game.hash,\n  randomAnswers: state.game.randomAnswers,\n  sorted: state.game.sorted\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/eric/sd-07-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","connect","fetchQuestions","updateAssertions","updateRandomAnswers","updateScore","GameHeader","setStorage","getStorage","Game","Component","constructor","state","currentQuestion","nextQuestion","disabledTimeOut","timer","shuffle","bind","handleAnswer","handleNext","timeOut","disableQuestion","saveRanking","playerLocalStorage","componentDidMount","props","requestQuestions","token","answers","i","length","j","Math","floor","random","target","name","difficulty","console","log","assertionsAction","scoreAction","answerButtons","document","querySelectorAll","forEach","button","classList","remove","setState","questions","history","assertions","randomAnswersAction","mockData","player","score","randomAnswers","sorted","prevSate","push","ranking","hash","src","firstRanking","picture","rankinkNew","ONE_SEC","setInterval","email","gravatarEmail","localStorage","setItem","JSON","stringify","render","undefined","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","taggedAnswers","type","correct","answer","index","randomAnswersLocal","category","map","e","visibility","propTypes","shape","func","isRequired","number","string","arrayOf","object","bool","mapDispatchToProps","dispatch","payload","mapStateToProps","isLoading","game","results","login"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  fetchQuestions,\n  updateAssertions,\n  updateRandomAnswers,\n  updateScore,\n} from '../actions';\nimport GameHeader from '../components/GameHeader';\nimport { setStorage, getStorage } from '../services';\nimport '../style/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestion: 0,\n      nextQuestion: false,\n      disabledTimeOut: false,\n      timer: 30,\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.disableQuestion = this.disableQuestion.bind(this);\n    this.saveRanking = this.saveRanking.bind(this);\n    this.playerLocalStorage = this.playerLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    this.timeOut();\n    const { requestQuestions, token } = this.props;\n    await requestQuestions(token);\n    this.playerLocalStorage();\n  }\n\n  shuffle(answers) {\n    for (let i = answers.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n\n  async handleAnswer({ target: { name } }, difficulty) {\n    console.log('handle', difficulty);\n    const { assertionsAction, scoreAction } = this.props;\n    const { timer } = this.state;\n    const answerButtons = document.querySelectorAll('.hidden');\n    answerButtons.forEach((button) => button.classList.remove('hidden'));\n    if (name === 'correct') {\n      await scoreAction(timer, difficulty);\n      await assertionsAction();\n    }\n    this.setState({ nextQuestion: true });\n    this.playerLocalStorage();\n  }\n\n  handleNext() {\n    const { questions, history, assertions, randomAnswersAction } = this.props;\n    const { currentQuestion } = this.state;\n    const state = getStorage('state');\n    const mockData = { ...state,\n      player: { ...state.player,\n        score: assertions,\n        assertions,\n      },\n    };\n    setStorage('state', mockData);\n    if (currentQuestion !== questions.length - 1) {\n      randomAnswersAction({ randomAnswers: [], sorted: false });\n      this.setState((prevSate) => ({\n        currentQuestion: prevSate.currentQuestion + 1,\n        nextQuestion: false,\n        timer: 30,\n      }));\n    } else {\n      this.saveRanking();\n      history.push('/feedbacks');\n    }\n  }\n\n  saveRanking() {\n    const ranking = getStorage('ranking');\n    const { hash, name, assertions } = this.props;\n    const src = `https://www.gravatar.com/avatar/${hash}`;\n    if (!ranking) {\n      const firstRanking = [\n        {\n          name,\n          score: assertions,\n          picture: src,\n        },\n      ];\n      setStorage('ranking', firstRanking);\n    } else {\n      const rankinkNew = {\n        name,\n        score: assertions,\n        picture: src,\n      };\n      ranking.push(rankinkNew);\n      setStorage('ranking', ranking);\n    }\n  }\n\n  disableQuestion() {\n    const { timer } = this.state;\n    console.log('disableQuestion');\n    if (timer <= 0) {\n      this.setState({ disabledTimeOut: true });\n    }\n  }\n\n  timeOut() {\n    const ONE_SEC = 1000;\n    console.log('timeOut');\n    setInterval(() => {\n      this.setState(\n        (state) => ({\n          timer: state.timer - 1,\n        }),\n        this.disableQuestion,\n      );\n    }, ONE_SEC);\n  }\n\n  playerLocalStorage() {\n    const { name, assertions, email, score } = this.props;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    const { questions, randomAnswersAction, randomAnswers, sorted } = this.props;\n    const { currentQuestion, nextQuestion, timer, disabledTimeOut } = this.state;\n    if (questions === undefined) return <p>Loading...</p>;\n    const question = questions[currentQuestion];\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n      difficulty,\n    } = question;\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const taggedAnswers = question.type !== 'boolean' ? [{\n      correct: true,\n      answer: answers[0],\n      difficulty,\n    },\n    {\n      correct: false,\n      answer: answers[1],\n      index: 0,\n      difficulty,\n    },\n    {\n      correct: false,\n      answer: answers[2],\n      index: 1,\n      difficulty,\n    },\n    {\n      correct: false,\n      answer: answers[3],\n      index: 2,\n      difficulty,\n    }]\n      : [{\n        correct: true,\n        answer: answers[0],\n        difficulty,\n      },\n      {\n        correct: false,\n        answer: answers[1],\n        index: 0,\n        difficulty,\n      }];\n    const randomAnswersLocal = sorted ? randomAnswers : this.shuffle(taggedAnswers);\n    randomAnswersAction({ randomAnswers: randomAnswersLocal, sorted: true });\n    return (\n      <div>\n        <GameHeader />\n        <div key={ question.question }>\n          <h4 key={ question.category } data-testid=\"question-category\">\n            {question.category}\n          </h4>\n          <h3 data-testid=\"question-text\">\n            {question.question}\n          </h3>\n          {randomAnswersLocal.map((answer) => (\n            <button\n              className={ `hidden ${answer.correct ? 'rightGreen' : 'wrongRed'}` }\n              type=\"button\"\n              key={ answer.answer }\n              name={ answer.correct\n                ? 'correct'\n                : 'wrong' }\n              data-testid={ answer.correct\n                ? 'correct-answer'\n                : `wrong-answer-${answer.index}` }\n              onClick={ (e) => this.handleAnswer(e, answer.difficulty) }\n              disabled={ disabledTimeOut }\n            >\n              {answer.answer}\n            </button>\n          ))}\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ this.handleNext }\n            style={ nextQuestion ? { visibility: 'visible' } : { visibility: 'hidden' } }\n            disabled={ disabledTimeOut }\n          >\n            Próxima pergunta\n          </button>\n          {!disabledTimeOut && timer}\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  questions: PropTypes.shape({\n    length: PropTypes.number.isRequired,\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  assertionsAction: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired,\n  hash: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  scoreAction: PropTypes.func.isRequired,\n  randomAnswersAction: PropTypes.func.isRequired,\n  randomAnswers: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sorted: PropTypes.bool.isRequired,\n\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (questions) => dispatch(fetchQuestions(questions)),\n  assertionsAction: () => dispatch(updateAssertions()),\n  scoreAction: (payload, difficulty) => dispatch(updateScore(payload, difficulty)),\n  randomAnswersAction: (payload) => dispatch(updateRandomAnswers(payload)),\n\n});\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.game.isLoading,\n  questions: state.game.questions.results,\n  token: state.login.token,\n  name: state.login.name,\n  email: state.login.email,\n  score: state.game.score,\n  assertions: state.game.assertions,\n  hash: state.game.hash,\n  randomAnswers: state.game.randomAnswers,\n  sorted: state.game.sorted,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}