{"ast":null,"code":"var _jsxFileName = \"/home/eric/sd-07-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuestions } from '../actions';\nimport game from '../style/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.shuffle = this.shuffle.bind(this);\n    this.applyColor = this.applyColor.bind(this);\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          requestQuestions = _this$props.requestQuestions,\n          token = _this$props.token;\n    requestQuestions(token);\n  }\n\n  shuffle(answers) {\n    for (let i = answers.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      var _ref = [answers[j], answers[i]];\n      answers[i] = _ref[0];\n      answers[j] = _ref[1];\n    }\n\n    return answers;\n  }\n\n  applyColor(randomAnswers) {\n    randomAnswers.map(answer => {\n      const color = answer.correct ? 'rightGreen' : 'wrongRed';\n      document.getElementById(`button-choice${answer}`).className = color;\n    });\n  }\n\n  render() {\n    const questions = this.props.questions;\n    if (questions === undefined) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Loading...\");\n    const question = questions[0];\n    const correctAnswer = question.correct_answer,\n          incorrectAnswers = question.incorrect_answers;\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const taggedAnswers = question.type !== 'boolean' ? [{\n      correct: true,\n      answer: answers[0]\n    }, {\n      correct: false,\n      answer: answers[1],\n      index: 0\n    }, {\n      correct: false,\n      answer: answers[2],\n      index: 1\n    }, {\n      correct: false,\n      answer: answers[3],\n      index: 2\n    }] : [{\n      correct: true,\n      answer: answers[0]\n    }, {\n      correct: false,\n      answer: answers[1],\n      index: 0\n    }];\n    const randomAnswers = this.shuffle(taggedAnswers); // let btnClass = '';\n\n    return React.createElement(\"div\", {\n      key: question.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      key: question.category,\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, question.category), React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, question.question), randomAnswers.map(answer => React.createElement(\"button\", {\n      id: `button-choice${answer}`,\n      type: \"button\",\n      key: answer.answer,\n      onClick: this.applyColor(randomAnswers),\n      \"data-testid\": answer.correct ? 'correct-answer' : `wrong-answer-${answer.index}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, answer.answer)));\n  }\n\n}\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: questions => dispatch(fetchQuestions(questions))\n});\n\nconst mapStateToProps = state => ({\n  isFetching: state.game.isFetching,\n  questions: state.game.questions.results,\n  token: state.fetch.token\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/eric/sd-07-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","connect","fetchQuestions","game","Game","Component","constructor","shuffle","bind","applyColor","componentDidMount","props","requestQuestions","token","answers","i","length","j","Math","floor","random","randomAnswers","map","answer","color","correct","document","getElementById","className","render","questions","undefined","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","taggedAnswers","type","index","category","propTypes","arrayOf","object","isRequired","func","string","mapDispatchToProps","dispatch","mapStateToProps","state","isFetching","results","fetch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuestions } from '../actions';\nimport game from '../style/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.shuffle = this.shuffle.bind(this);\n    this.applyColor = this.applyColor.bind(this);\n  }\n\n  async componentDidMount() {\n    const { requestQuestions, token } = this.props;\n    requestQuestions(token);\n  }\n\n  shuffle(answers) {\n    for (let i = answers.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n\n  applyColor(randomAnswers) {\n    randomAnswers.map((answer) => {\n      const color = answer.correct ? 'rightGreen' : 'wrongRed';\n      document.getElementById(`button-choice${answer}`).className = color;\n    });\n  }\n\n  render() {\n    const { questions } = this.props;\n    if (questions === undefined) return <p>Loading...</p>;\n    const question = questions[0];\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = question;\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const taggedAnswers = question.type !== 'boolean' ? [{\n      correct: true,\n      answer: answers[0],\n    },\n    {\n      correct: false,\n      answer: answers[1],\n      index: 0,\n    },\n    {\n      correct: false,\n      answer: answers[2],\n      index: 1,\n    },\n    {\n      correct: false,\n      answer: answers[3],\n      index: 2,\n    }]\n      : [{\n        correct: true,\n        answer: answers[0],\n      },\n      {\n        correct: false,\n        answer: answers[1],\n        index: 0,\n      }];\n    const randomAnswers = this.shuffle(taggedAnswers);\n    // let btnClass = '';\n    return (\n      <div key={ question.question }>\n        <h4 key={ question.category } data-testid=\"question-category\">\n          {question.category}\n        </h4>\n        <h3 data-testid=\"question-text\">\n          {question.question}\n        </h3>\n        {randomAnswers.map((answer) => (\n          <button\n            id={ `button-choice${answer}` }\n            type=\"button\"\n            key={ answer.answer }\n            onClick={\n              this.applyColor(randomAnswers)\n            }\n            data-testid={ answer.correct\n              ? 'correct-answer'\n              : `wrong-answer-${answer.index}` }\n          >\n            {answer.answer}\n\n          </button>\n        ))}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (questions) => dispatch(fetchQuestions(questions)),\n});\n\nconst mapStateToProps = (state) => ({\n  isFetching: state.game.isFetching,\n  questions: state.game.questions.results,\n  token: state.fetch.token,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}