{"ast":null,"code":"var _jsxFileName = \"/home/eric/sd-07-project-trivia-react-redux/src/pages/Login.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { login, fetchToken, resetAssertions } from '../actions/index';\nimport { setStorage } from '../services';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      name: '',\n      authentication: false\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.saveLoginLocalStorage = this.saveLoginLocalStorage.bind(this);\n  }\n\n  saveLoginLocalStorage(name, email) {\n    const resetAssertionsAction = this.props.resetAssertionsAction;\n    const newPlayer = {\n      player: {\n        name,\n        email,\n        score: 0,\n        assertions: 0\n      }\n    };\n    setStorage('state', newPlayer);\n    resetAssertionsAction();\n  }\n\n  handleEmailChange({\n    target\n  }) {\n    const value = target.value;\n    this.setState({\n      email: value\n    }, () => {\n      const email = this.state.email;\n      const regexEmail = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n      const verifyEmail = email.match(regexEmail);\n\n      if (verifyEmail) {\n        this.setState({\n          authentication: true\n        });\n      } else {\n        this.setState({\n          authentication: false\n        });\n      }\n    });\n  }\n\n  handleNameChange({\n    target\n  }) {\n    const value = target.value;\n    this.setState({\n      name: value\n    });\n  }\n\n  async handleClick() {\n    const _this$props = this.props,\n          history = _this$props.history,\n          tokenAction = _this$props.tokenAction,\n          token = _this$props.token;\n    await tokenAction(token);\n    history.push('/game');\n  }\n\n  render() {\n    const _this$state = this.state,\n          authentication = _this$state.authentication,\n          email = _this$state.email,\n          name = _this$state.name;\n    const loginAction = this.props.loginAction;\n    const numberCharacters = 1;\n    const history = this.props.history;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: event => this.handleEmailChange(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      \"data-testid\": \"input-player-name\",\n      onChange: event => this.handleNameChange(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      \"data-testid\": \"btn-play\",\n      disabled: !authentication || name.length < numberCharacters,\n      type: \"button\",\n      onClick: () => {\n        loginAction(name, email);\n        this.handleClick();\n        this.saveLoginLocalStorage(name, email);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Jogar\"), React.createElement(\"button\", {\n      \"data-testid\": \"btn-settings\",\n      type: \"button\",\n      onClick: () => history.push('/settings'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Configura\\xE7\\xF5es\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  loginAction: (name, email) => dispatch(login(name, email)),\n  tokenAction: token => dispatch(fetchToken(token)),\n  resetAssertionsAction: () => dispatch(resetAssertions())\n});\n\nconst mapStateToProps = state => ({\n  token: state.login.token\n});\n\nLogin.propTypes = {\n  loginAction: PropTypes.func.isRequired,\n  history: PropTypes.func.isRequired,\n  tokenAction: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  resetAssertionsAction: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/eric/sd-07-project-trivia-react-redux/src/pages/Login.js"],"names":["React","PropTypes","connect","login","fetchToken","resetAssertions","setStorage","Login","Component","constructor","state","email","name","authentication","handleEmailChange","bind","handleNameChange","handleClick","saveLoginLocalStorage","resetAssertionsAction","props","newPlayer","player","score","assertions","target","value","setState","regexEmail","verifyEmail","match","history","tokenAction","token","push","render","loginAction","numberCharacters","event","length","mapDispatchToProps","dispatch","mapStateToProps","propTypes","func","isRequired","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,eAA5B,QAAmD,kBAAnD;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,KAAN,SAAoBP,KAAK,CAACQ,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,IAAI,EAAE,EAFK;AAGXC,MAAAA,cAAc,EAAE;AAHL,KAAb;AAMA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BH,IAA3B,CAAgC,IAAhC,CAA7B;AACD;;AAEDG,EAAAA,qBAAqB,CAACN,IAAD,EAAOD,KAAP,EAAc;AAAA,UACzBQ,qBADyB,GACC,KAAKC,KADN,CACzBD,qBADyB;AAEjC,UAAME,SAAS,GAAG;AAChBC,MAAAA,MAAM,EAAE;AACNV,QAAAA,IADM;AAEND,QAAAA,KAFM;AAGNY,QAAAA,KAAK,EAAE,CAHD;AAINC,QAAAA,UAAU,EAAE;AAJN;AADQ,KAAlB;AAQAlB,IAAAA,UAAU,CAAC,OAAD,EAAUe,SAAV,CAAV;AACAF,IAAAA,qBAAqB;AACtB;;AAEDL,EAAAA,iBAAiB,CAAC;AAAEW,IAAAA;AAAF,GAAD,EAAa;AAAA,UACpBC,KADoB,GACVD,MADU,CACpBC,KADoB;AAE5B,SAAKC,QAAL,CAAc;AAAEhB,MAAAA,KAAK,EAAEe;AAAT,KAAd,EAAgC,MAAM;AAAA,YAC5Bf,KAD4B,GAClB,KAAKD,KADa,CAC5BC,KAD4B;AAEpC,YAAMiB,UAAU,GAAG,kCAAnB;AACA,YAAMC,WAAW,GAAGlB,KAAK,CAACmB,KAAN,CAAYF,UAAZ,CAApB;;AACA,UAAIC,WAAJ,EAAiB;AACf,aAAKF,QAAL,CAAc;AAAEd,UAAAA,cAAc,EAAE;AAAlB,SAAd;AACD,OAFD,MAEO;AACL,aAAKc,QAAL,CAAc;AAAEd,UAAAA,cAAc,EAAE;AAAlB,SAAd;AACD;AACF,KATD;AAUD;;AAEDG,EAAAA,gBAAgB,CAAC;AAAES,IAAAA;AAAF,GAAD,EAAa;AAAA,UACnBC,KADmB,GACTD,MADS,CACnBC,KADmB;AAE3B,SAAKC,QAAL,CAAc;AAAEf,MAAAA,IAAI,EAAEc;AAAR,KAAd;AACD;;AAED,QAAMT,WAAN,GAAoB;AAAA,wBACsB,KAAKG,KAD3B;AAAA,UACVW,OADU,eACVA,OADU;AAAA,UACDC,WADC,eACDA,WADC;AAAA,UACYC,KADZ,eACYA,KADZ;AAElB,UAAMD,WAAW,CAACC,KAAD,CAAjB;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,OAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKzB,KADtC;AAAA,UACCG,cADD,eACCA,cADD;AAAA,UACiBF,KADjB,eACiBA,KADjB;AAAA,UACwBC,IADxB,eACwBA,IADxB;AAAA,UAECwB,WAFD,GAEiB,KAAKhB,KAFtB,CAECgB,WAFD;AAGP,UAAMC,gBAAgB,GAAG,CAAzB;AAHO,UAICN,OAJD,GAIa,KAAKX,KAJlB,CAICW,OAJD;AAMP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,qBAAY,sBADd;AAEE,MAAA,QAAQ,EAAIO,KAAD,IAAW,KAAKxB,iBAAL,CAAuBwB,KAAvB,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AACE,qBAAY,mBADd;AAEE,MAAA,QAAQ,EAAIA,KAAD,IAAW,KAAKtB,gBAAL,CAAsBsB,KAAtB,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EASE;AACE,qBAAY,UADd;AAEE,MAAA,QAAQ,EAAG,CAACzB,cAAD,IAAmBD,IAAI,CAAC2B,MAAL,GAAcF,gBAF9C;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,OAAO,EAAG,MAAM;AACdD,QAAAA,WAAW,CAACxB,IAAD,EAAOD,KAAP,CAAX;AACA,aAAKM,WAAL;AACA,aAAKC,qBAAL,CAA2BN,IAA3B,EAAiCD,KAAjC;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATF,EAqBE;AACE,qBAAY,cADd;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,OAAO,EAAG,MAAMoB,OAAO,CAACG,IAAR,CAAa,WAAb,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BArBF,CADF;AA+BD;;AA5FiC;;AA+FpC,MAAMM,kBAAkB,GAAIC,QAAD,KAAe;AACxCL,EAAAA,WAAW,EAAE,CAACxB,IAAD,EAAOD,KAAP,KAAiB8B,QAAQ,CAACtC,KAAK,CAACS,IAAD,EAAOD,KAAP,CAAN,CADE;AAExCqB,EAAAA,WAAW,EAAGC,KAAD,IAAWQ,QAAQ,CAACrC,UAAU,CAAC6B,KAAD,CAAX,CAFQ;AAGxCd,EAAAA,qBAAqB,EAAE,MAAMsB,QAAQ,CAACpC,eAAe,EAAhB;AAHG,CAAf,CAA3B;;AAMA,MAAMqC,eAAe,GAAIhC,KAAD,KAAY;AAClCuB,EAAAA,KAAK,EAAEvB,KAAK,CAACP,KAAN,CAAY8B;AADe,CAAZ,CAAxB;;AAIA1B,KAAK,CAACoC,SAAN,GAAkB;AAChBP,EAAAA,WAAW,EAAEnC,SAAS,CAAC2C,IAAV,CAAeC,UADZ;AAEhBd,EAAAA,OAAO,EAAE9B,SAAS,CAAC2C,IAAV,CAAeC,UAFR;AAGhBb,EAAAA,WAAW,EAAE/B,SAAS,CAAC2C,IAAV,CAAeC,UAHZ;AAIhBZ,EAAAA,KAAK,EAAEhC,SAAS,CAAC6C,MAAV,CAAiBD,UAJR;AAKhB1B,EAAAA,qBAAqB,EAAElB,SAAS,CAAC2C,IAAV,CAAeC;AALtB,CAAlB;AAQA,eAAe3C,OAAO,CAACwC,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CjC,KAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { login, fetchToken, resetAssertions } from '../actions/index';\nimport { setStorage } from '../services';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      name: '',\n      authentication: false,\n    };\n\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.saveLoginLocalStorage = this.saveLoginLocalStorage.bind(this);\n  }\n\n  saveLoginLocalStorage(name, email) {\n    const { resetAssertionsAction } = this.props;\n    const newPlayer = {\n      player: {\n        name,\n        email,\n        score: 0,\n        assertions: 0,\n      },\n    };\n    setStorage('state', newPlayer);\n    resetAssertionsAction();\n  }\n\n  handleEmailChange({ target }) {\n    const { value } = target;\n    this.setState({ email: value }, () => {\n      const { email } = this.state;\n      const regexEmail = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n      const verifyEmail = email.match(regexEmail);\n      if (verifyEmail) {\n        this.setState({ authentication: true });\n      } else {\n        this.setState({ authentication: false });\n      }\n    });\n  }\n\n  handleNameChange({ target }) {\n    const { value } = target;\n    this.setState({ name: value });\n  }\n\n  async handleClick() {\n    const { history, tokenAction, token } = this.props;\n    await tokenAction(token);\n    history.push('/game');\n  }\n\n  render() {\n    const { authentication, email, name } = this.state;\n    const { loginAction } = this.props;\n    const numberCharacters = 1;\n    const { history } = this.props;\n\n    return (\n      <div>\n        <input\n          data-testid=\"input-gravatar-email\"\n          onChange={ (event) => this.handleEmailChange(event) }\n        />\n        <input\n          data-testid=\"input-player-name\"\n          onChange={ (event) => this.handleNameChange(event) }\n        />\n        <button\n          data-testid=\"btn-play\"\n          disabled={ !authentication || name.length < numberCharacters }\n          type=\"button\"\n          onClick={ () => {\n            loginAction(name, email);\n            this.handleClick();\n            this.saveLoginLocalStorage(name, email);\n          } }\n        >\n          Jogar\n        </button>\n        <button\n          data-testid=\"btn-settings\"\n          type=\"button\"\n          onClick={ () => history.push('/settings') }\n        >\n          Configurações\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginAction: (name, email) => dispatch(login(name, email)),\n  tokenAction: (token) => dispatch(fetchToken(token)),\n  resetAssertionsAction: () => dispatch(resetAssertions()),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.login.token,\n});\n\nLogin.propTypes = {\n  loginAction: PropTypes.func.isRequired,\n  history: PropTypes.func.isRequired,\n  tokenAction: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  resetAssertionsAction: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}