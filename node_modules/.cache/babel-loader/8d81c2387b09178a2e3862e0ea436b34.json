{"ast":null,"code":"import _objectSpread from \"/home/eric/project-trivia-react-redux-trybe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { REQUEST_STARTED, REQUEST_FAIL, FETCH_QUESTIONS_SUCCESS, EMAIL_HASH, UPDATE_ASSERTIONS, RESET_ASSERTIONS, UPDATE_SCORE, UPDATE_RANDOM_ANSWERS } from '../actions';\nconst INITIAL_STATE = {\n  isLoading: false,\n  error: '',\n  questions: {},\n  assertions: 0,\n  score: 0,\n  hash: '',\n  timeLeft: 0,\n  difficulty: null,\n  randomAnswers: [],\n  sorted: false\n};\n\nfunction updateScoreFunc(state, action) {\n  const payload = action.payload;\n  const difficulty = payload.difficulty;\n  const timer = payload.timer;\n  const level = {\n    hard: {\n      value: 3\n    },\n    medium: {\n      value: 2\n    },\n    easy: {\n      value: 1\n    }\n  };\n  const count = 10;\n  const totalScore = count + level[difficulty].value * timer;\n  console.log(totalScore);\n  return _objectSpread({}, state, {\n    score: state.score + totalScore\n  });\n}\n\nconst gameReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case EMAIL_HASH:\n      return _objectSpread({}, state, {\n        hash: action.hash\n      });\n\n    case REQUEST_STARTED:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case REQUEST_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.error.message\n      });\n\n    case FETCH_QUESTIONS_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        questions: action.payload\n      });\n\n    case UPDATE_SCORE:\n      return updateScoreFunc(state, action);\n\n    case UPDATE_ASSERTIONS:\n      return _objectSpread({}, state, {\n        assertions: state.assertions + 1\n      });\n\n    case UPDATE_RANDOM_ANSWERS:\n      return _objectSpread({}, state, {\n        randomAnswers: action.payload.randomAnswers,\n        sorted: action.payload.sorted\n      });\n\n    case RESET_ASSERTIONS:\n      return _objectSpread({}, state, {\n        assertions: 0\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;","map":{"version":3,"sources":["/home/eric/project-trivia-react-redux-trybe/src/reducers/game.js"],"names":["REQUEST_STARTED","REQUEST_FAIL","FETCH_QUESTIONS_SUCCESS","EMAIL_HASH","UPDATE_ASSERTIONS","RESET_ASSERTIONS","UPDATE_SCORE","UPDATE_RANDOM_ANSWERS","INITIAL_STATE","isLoading","error","questions","assertions","score","hash","timeLeft","difficulty","randomAnswers","sorted","updateScoreFunc","state","action","payload","timer","level","hard","value","medium","easy","count","totalScore","console","log","gameReducer","type","message"],"mappings":";AAAA,SACEA,eADF,EAEEC,YAFF,EAGEC,uBAHF,EAIEC,UAJF,EAKEC,iBALF,EAMEC,gBANF,EAOEC,YAPF,EAQEC,qBARF,QASO,YATP;AAWA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE,KADS;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBC,EAAAA,SAAS,EAAE,EAHS;AAIpBC,EAAAA,UAAU,EAAE,CAJQ;AAKpBC,EAAAA,KAAK,EAAE,CALa;AAMpBC,EAAAA,IAAI,EAAE,EANc;AAOpBC,EAAAA,QAAQ,EAAE,CAPU;AAQpBC,EAAAA,UAAU,EAAE,IARQ;AASpBC,EAAAA,aAAa,EAAE,EATK;AAUpBC,EAAAA,MAAM,EAAE;AAVY,CAAtB;;AAcA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AAAA,QAC9BC,OAD8B,GAClBD,MADkB,CAC9BC,OAD8B;AAAA,QAE9BN,UAF8B,GAEfM,OAFe,CAE9BN,UAF8B;AAAA,QAG9BO,KAH8B,GAGpBD,OAHoB,CAG9BC,KAH8B;AAItC,QAAMC,KAAK,GAAG;AACZC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE;AADH,KADM;AAIZC,IAAAA,MAAM,EAAE;AACND,MAAAA,KAAK,EAAE;AADD,KAJI;AAOZE,IAAAA,IAAI,EAAE;AACJF,MAAAA,KAAK,EAAE;AADH;AAPM,GAAd;AAWA,QAAMG,KAAK,GAAG,EAAd;AACA,QAAMC,UAAU,GAAGD,KAAK,GAAIL,KAAK,CAACR,UAAD,CAAL,CAAkBU,KAAlB,GAA0BH,KAAtD;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,2BAAYV,KAAZ;AAAmBP,IAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,GAAciB;AAAxC;AACD;;AAED,MAAMG,WAAW,GAAG,CAACb,KAAK,GAAGZ,aAAT,EAAwBa,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACa,IAAf;AACA,SAAK/B,UAAL;AACE,+BAAYiB,KAAZ;AAAmBN,QAAAA,IAAI,EAAEO,MAAM,CAACP;AAAhC;;AACF,SAAKd,eAAL;AACE,+BAAYoB,KAAZ;AAAmBX,QAAAA,SAAS,EAAE;AAA9B;;AACF,SAAKR,YAAL;AACE,+BAAYmB,KAAZ;AACEX,QAAAA,SAAS,EAAE,KADb;AAEEC,QAAAA,KAAK,EAAEW,MAAM,CAACX,KAAP,CAAayB;AAFtB;;AAIF,SAAKjC,uBAAL;AACE,+BAAYkB,KAAZ;AACEX,QAAAA,SAAS,EAAE,KADb;AAEEE,QAAAA,SAAS,EAAEU,MAAM,CAACC;AAFpB;;AAIF,SAAKhB,YAAL;AACE,aAAOa,eAAe,CAACC,KAAD,EAAQC,MAAR,CAAtB;;AACF,SAAKjB,iBAAL;AACE,+BAAYgB,KAAZ;AACER,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmB;AADjC;;AAEF,SAAKL,qBAAL;AACE,+BAAYa,KAAZ;AACEH,QAAAA,aAAa,EAAEI,MAAM,CAACC,OAAP,CAAeL,aADhC;AAEEC,QAAAA,MAAM,EAAEG,MAAM,CAACC,OAAP,CAAeJ;AAFzB;;AAIF,SAAKb,gBAAL;AACE,+BAAYe,KAAZ;AACER,QAAAA,UAAU,EAAE;AADd;;AAGF;AACE,aAAOQ,KAAP;AA9BF;AAgCD,CAjCD;;AAmCA,eAAea,WAAf","sourcesContent":["import {\n  REQUEST_STARTED,\n  REQUEST_FAIL,\n  FETCH_QUESTIONS_SUCCESS,\n  EMAIL_HASH,\n  UPDATE_ASSERTIONS,\n  RESET_ASSERTIONS,\n  UPDATE_SCORE,\n  UPDATE_RANDOM_ANSWERS,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  isLoading: false,\n  error: '',\n  questions: {},\n  assertions: 0,\n  score: 0,\n  hash: '',\n  timeLeft: 0,\n  difficulty: null,\n  randomAnswers: [],\n  sorted: false,\n\n};\n\nfunction updateScoreFunc(state, action) {\n  const { payload } = action;\n  const { difficulty } = payload;\n  const { timer } = payload;\n  const level = {\n    hard: {\n      value: 3,\n    },\n    medium: {\n      value: 2,\n    },\n    easy: {\n      value: 1,\n    },\n  };\n  const count = 10;\n  const totalScore = count + (level[difficulty].value * timer);\n  console.log(totalScore);\n  return { ...state, score: state.score + totalScore };\n}\n\nconst gameReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case EMAIL_HASH:\n    return { ...state, hash: action.hash };\n  case REQUEST_STARTED:\n    return { ...state, isLoading: true };\n  case REQUEST_FAIL:\n    return { ...state,\n      isLoading: false,\n      error: action.error.message,\n    };\n  case FETCH_QUESTIONS_SUCCESS:\n    return { ...state,\n      isLoading: false,\n      questions: action.payload,\n    };\n  case UPDATE_SCORE:\n    return updateScoreFunc(state, action);\n  case UPDATE_ASSERTIONS:\n    return { ...state,\n      assertions: state.assertions + 1 };\n  case UPDATE_RANDOM_ANSWERS:\n    return { ...state,\n      randomAnswers: action.payload.randomAnswers,\n      sorted: action.payload.sorted,\n    };\n  case RESET_ASSERTIONS:\n    return { ...state,\n      assertions: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default gameReducer;\n"]},"metadata":{},"sourceType":"module"}