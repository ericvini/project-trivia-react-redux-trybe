{"ast":null,"code":"var _jsxFileName = \"/home/eric/sd-07-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, updateAssertions } from '../actions';\nimport GameHeader from '../components/GameHeader';\nimport { setStorage } from '../services';\nimport '../style/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestion: 0,\n      nextQuestion: false,\n      disabledTimeOut: false,\n      timer: 30\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.disableQuestion = this.disableQuestion.bind(this);\n  }\n\n  async componentDidMount() {\n    this.timeOut();\n    const mockData = {\n      player: {\n        score: 0,\n        assertions: 0\n      }\n    };\n    setStorage('state', mockData);\n    const _this$props = this.props,\n          requestQuestions = _this$props.requestQuestions,\n          token = _this$props.token;\n    await requestQuestions(token);\n  }\n\n  shuffle(answers) {\n    for (let i = answers.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      var _ref = [answers[j], answers[i]];\n      answers[i] = _ref[0];\n      answers[j] = _ref[1];\n    }\n\n    return answers;\n  }\n\n  handleAnswer({\n    target: {\n      name\n    }\n  }) {\n    const assertionAction = this.props.assertionAction;\n    const answerButtons = document.querySelectorAll('.hidden');\n    answerButtons.forEach(button => button.classList.remove('hidden'));\n\n    if (name === 'correct') {\n      assertionAction();\n    }\n\n    this.setState({\n      nextQuestion: true\n    });\n  }\n\n  handleNext() {\n    const _this$props2 = this.props,\n          questions = _this$props2.questions,\n          history = _this$props2.history,\n          assertions = _this$props2.assertions;\n    const currentQuestion = this.state.currentQuestion;\n    const mockData = {\n      player: {\n        score: assertions,\n        assertions\n      }\n    };\n    setStorage('state', mockData);\n\n    if (currentQuestion !== questions.length - 1) {\n      this.setState(prevSate => ({\n        currentQuestion: prevSate.currentQuestion + 1,\n        nextQuestion: false\n      }));\n    } else {\n      history.push('/feedbacks');\n    }\n  }\n\n  disableQuestion() {\n    const timer = this.state.timer;\n\n    if (timer <= 0) {\n      this.setState({\n        disabledTimeOut: true\n      });\n    }\n  }\n\n  timeOut() {\n    const ONE_SEC = 1000;\n    setInterval(() => {\n      this.setState(state => ({\n        timer: state.timer - 1\n      }), this.disableQuestion);\n    }, ONE_SEC);\n  }\n\n  render() {\n    const questions = this.props.questions;\n    const _this$state = this.state,\n          currentQuestion = _this$state.currentQuestion,\n          nextQuestion = _this$state.nextQuestion,\n          timer = _this$state.timer,\n          disabledTimeOut = _this$state.disabledTimeOut;\n    if (questions === undefined) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Loading...\");\n    const question = questions[currentQuestion];\n    const correctAnswer = question.correct_answer,\n          incorrectAnswers = question.incorrect_answers;\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const taggedAnswers = question.type !== 'boolean' ? [{\n      correct: true,\n      answer: answers[0]\n    }, {\n      correct: false,\n      answer: answers[1],\n      index: 0\n    }, {\n      correct: false,\n      answer: answers[2],\n      index: 1\n    }, {\n      correct: false,\n      answer: answers[3],\n      index: 2\n    }] : [{\n      correct: true,\n      answer: answers[0]\n    }, {\n      correct: false,\n      answer: answers[1],\n      index: 0\n    }];\n    const randomAnswers = this.shuffle(taggedAnswers);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(GameHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      key: question.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      key: question.category,\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, question.category), React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, question.question), randomAnswers.map(answer => React.createElement(\"button\", {\n      className: `hidden ${answer.correct ? 'rightGreen' : 'wrongRed'}`,\n      type: \"button\",\n      key: answer.answer,\n      name: answer.correct ? 'correct' : 'wrong',\n      \"data-testid\": answer.correct ? 'correct-answer' : `wrong-answer-${answer.index}`,\n      onClick: e => this.handleAnswer(e),\n      disabled: disabledTimeOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, answer.answer)), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleNext,\n      style: nextQuestion ? {\n        visibility: 'visible'\n      } : {\n        visibility: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Pr\\xF3xima pergunta\"), !disabledTimeOut && timer));\n  }\n\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  questions: PropTypes.shape({\n    length: PropTypes.number.isRequired\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  assertionAction: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: questions => dispatch(fetchQuestions(questions)),\n  assertionAction: () => dispatch(updateAssertions())\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.game.isLoading,\n  questions: state.game.questions.results,\n  token: state.login.token,\n  assertions: state.game.assertions\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/eric/sd-07-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","connect","fetchQuestions","updateAssertions","GameHeader","setStorage","Game","Component","constructor","state","currentQuestion","nextQuestion","disabledTimeOut","timer","shuffle","bind","handleAnswer","handleNext","timeOut","disableQuestion","componentDidMount","mockData","player","score","assertions","props","requestQuestions","token","answers","i","length","j","Math","floor","random","target","name","assertionAction","answerButtons","document","querySelectorAll","forEach","button","classList","remove","setState","questions","history","prevSate","push","ONE_SEC","setInterval","render","undefined","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","taggedAnswers","type","correct","answer","index","randomAnswers","category","map","e","visibility","propTypes","shape","func","isRequired","number","string","mapDispatchToProps","dispatch","mapStateToProps","isLoading","game","results","login"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,YAAjD;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAO,mBAAP;;AAEA,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE,CADN;AAEXC,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,eAAe,EAAE,KAHN;AAIXC,MAAAA,KAAK,EAAE;AAJI,KAAb;AAMA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKI,eAAL,GAAuB,KAAKA,eAAL,CAAqBJ,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAED,QAAMK,iBAAN,GAA0B;AACxB,SAAKF,OAAL;AACA,UAAMG,QAAQ,GAAG;AACfC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CADD;AAENC,QAAAA,UAAU,EAAE;AAFN;AADO,KAAjB;AAMAnB,IAAAA,UAAU,CAAC,OAAD,EAAUgB,QAAV,CAAV;AARwB,wBASY,KAAKI,KATjB;AAAA,UAShBC,gBATgB,eAShBA,gBATgB;AAAA,UASEC,KATF,eASEA,KATF;AAUxB,UAAMD,gBAAgB,CAACC,KAAD,CAAtB;AACD;;AAEDb,EAAAA,OAAO,CAACc,OAAD,EAAU;AACf,SAAK,IAAIC,CAAC,GAAGD,OAAO,CAACE,MAAR,GAAiB,CAA9B,EAAiCD,CAAC,GAAG,CAArC,EAAwCA,CAAC,IAAI,CAA7C,EAAgD;AAC9C,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AAD8C,iBAEnB,CAACD,OAAO,CAACG,CAAD,CAAR,EAAaH,OAAO,CAACC,CAAD,CAApB,CAFmB;AAE7CD,MAAAA,OAAO,CAACC,CAAD,CAFsC;AAEjCD,MAAAA,OAAO,CAACG,CAAD,CAF0B;AAG/C;;AACD,WAAOH,OAAP;AACD;;AAEDZ,EAAAA,YAAY,CAAC;AAAEmB,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,EAAuB;AAAA,UACzBC,eADyB,GACL,KAAKZ,KADA,CACzBY,eADyB;AAEjC,UAAMC,aAAa,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAtB;AACAF,IAAAA,aAAa,CAACG,OAAd,CAAuBC,MAAD,IAAYA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,CAAwB,QAAxB,CAAlC;;AACA,QAAIR,IAAI,KAAK,SAAb,EAAwB;AACtBC,MAAAA,eAAe;AAChB;;AACD,SAAKQ,QAAL,CAAc;AACZlC,MAAAA,YAAY,EAAE;AADF,KAAd;AAGD;;AAEDM,EAAAA,UAAU,GAAG;AAAA,yBACgC,KAAKQ,KADrC;AAAA,UACHqB,SADG,gBACHA,SADG;AAAA,UACQC,OADR,gBACQA,OADR;AAAA,UACiBvB,UADjB,gBACiBA,UADjB;AAAA,UAEHd,eAFG,GAEiB,KAAKD,KAFtB,CAEHC,eAFG;AAGX,UAAMW,QAAQ,GAAG;AACfC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEC,UADD;AAENA,QAAAA;AAFM;AADO,KAAjB;AAMAnB,IAAAA,UAAU,CAAC,OAAD,EAAUgB,QAAV,CAAV;;AACA,QAAIX,eAAe,KAAKoC,SAAS,CAAChB,MAAV,GAAmB,CAA3C,EAA8C;AAC5C,WAAKe,QAAL,CAAeG,QAAD,KAAe;AAC3BtC,QAAAA,eAAe,EAAEsC,QAAQ,CAACtC,eAAT,GAA2B,CADjB;AAE3BC,QAAAA,YAAY,EAAE;AAFa,OAAf,CAAd;AAID,KALD,MAKO;AACLoC,MAAAA,OAAO,CAACE,IAAR,CAAa,YAAb;AACD;AACF;;AAED9B,EAAAA,eAAe,GAAG;AAAA,UACRN,KADQ,GACE,KAAKJ,KADP,CACRI,KADQ;;AAEhB,QAAIA,KAAK,IAAI,CAAb,EAAgB;AACd,WAAKgC,QAAL,CAAc;AAAEjC,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACD;AACF;;AAEDM,EAAAA,OAAO,GAAG;AACR,UAAMgC,OAAO,GAAG,IAAhB;AACAC,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKN,QAAL,CACGpC,KAAD,KAAY;AACVI,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,GAAc;AADX,OAAZ,CADF,EAIE,KAAKM,eAJP;AAMD,KAPU,EAOR+B,OAPQ,CAAX;AAQD;;AAEDE,EAAAA,MAAM,GAAG;AAAA,UACCN,SADD,GACe,KAAKrB,KADpB,CACCqB,SADD;AAAA,wBAE2D,KAAKrC,KAFhE;AAAA,UAECC,eAFD,eAECA,eAFD;AAAA,UAEkBC,YAFlB,eAEkBA,YAFlB;AAAA,UAEgCE,KAFhC,eAEgCA,KAFhC;AAAA,UAEuCD,eAFvC,eAEuCA,eAFvC;AAGP,QAAIkC,SAAS,KAAKO,SAAlB,EAA6B,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAC7B,UAAMC,QAAQ,GAAGR,SAAS,CAACpC,eAAD,CAA1B;AAJO,UAMW6C,aANX,GAQHD,QARG,CAMLE,cANK;AAAA,UAOcC,gBAPd,GAQHH,QARG,CAOLI,iBAPK;AASP,UAAM9B,OAAO,GAAG,CAAC2B,aAAD,EAAgB,GAAGE,gBAAnB,CAAhB;AACA,UAAME,aAAa,GAAGL,QAAQ,CAACM,IAAT,KAAkB,SAAlB,GAA8B,CAAC;AACnDC,MAAAA,OAAO,EAAE,IAD0C;AAEnDC,MAAAA,MAAM,EAAElC,OAAO,CAAC,CAAD;AAFoC,KAAD,EAIpD;AACEiC,MAAAA,OAAO,EAAE,KADX;AAEEC,MAAAA,MAAM,EAAElC,OAAO,CAAC,CAAD,CAFjB;AAGEmC,MAAAA,KAAK,EAAE;AAHT,KAJoD,EASpD;AACEF,MAAAA,OAAO,EAAE,KADX;AAEEC,MAAAA,MAAM,EAAElC,OAAO,CAAC,CAAD,CAFjB;AAGEmC,MAAAA,KAAK,EAAE;AAHT,KAToD,EAcpD;AACEF,MAAAA,OAAO,EAAE,KADX;AAEEC,MAAAA,MAAM,EAAElC,OAAO,CAAC,CAAD,CAFjB;AAGEmC,MAAAA,KAAK,EAAE;AAHT,KAdoD,CAA9B,GAmBlB,CAAC;AACDF,MAAAA,OAAO,EAAE,IADR;AAEDC,MAAAA,MAAM,EAAElC,OAAO,CAAC,CAAD;AAFd,KAAD,EAIF;AACEiC,MAAAA,OAAO,EAAE,KADX;AAEEC,MAAAA,MAAM,EAAElC,OAAO,CAAC,CAAD,CAFjB;AAGEmC,MAAAA,KAAK,EAAE;AAHT,KAJE,CAnBJ;AA4BA,UAAMC,aAAa,GAAG,KAAKlD,OAAL,CAAa6C,aAAb,CAAtB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,GAAG,EAAGL,QAAQ,CAACA,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,GAAG,EAAGA,QAAQ,CAACW,QAAnB;AAA8B,qBAAY,mBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,QAAQ,CAACW,QADZ,CADF,EAIE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,QAAQ,CAACA,QADZ,CAJF,EAOGU,aAAa,CAACE,GAAd,CAAmBJ,MAAD,IACjB;AACE,MAAA,SAAS,EAAI,UAASA,MAAM,CAACD,OAAP,GAAiB,YAAjB,GAAgC,UAAW,EADnE;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,GAAG,EAAGC,MAAM,CAACA,MAHf;AAIE,MAAA,IAAI,EAAGA,MAAM,CAACD,OAAP,GACH,SADG,GAEH,OANN;AAOE,qBAAcC,MAAM,CAACD,OAAP,GACV,gBADU,GAET,gBAAeC,MAAM,CAACC,KAAM,EATnC;AAUE,MAAA,OAAO,EAAII,CAAD,IAAO,KAAKnD,YAAL,CAAkBmD,CAAlB,CAVnB;AAWE,MAAA,QAAQ,EAAGvD,eAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaGkD,MAAM,CAACA,MAbV,CADD,CAPH,EAyBE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,qBAAY,UAFd;AAGE,MAAA,OAAO,EAAG,KAAK7C,UAHjB;AAIE,MAAA,KAAK,EAAGN,YAAY,GAAG;AAAEyD,QAAAA,UAAU,EAAE;AAAd,OAAH,GAA+B;AAAEA,QAAAA,UAAU,EAAE;AAAd,OAJrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAzBF,EAiCG,CAACxD,eAAD,IAAoBC,KAjCvB,CAFF,CADF;AAwCD;;AAvKgC;;AA0KnCP,IAAI,CAAC+D,SAAL,GAAiB;AACftB,EAAAA,OAAO,EAAE/C,SAAS,CAACsE,KAAV,CAAgB;AACvBrB,IAAAA,IAAI,EAAEjD,SAAS,CAACuE,IAAV,CAAeC;AADE,GAAhB,EAENA,UAHY;AAIf1B,EAAAA,SAAS,EAAE9C,SAAS,CAACsE,KAAV,CAAgB;AACzBxC,IAAAA,MAAM,EAAE9B,SAAS,CAACyE,MAAV,CAAiBD;AADA,GAAhB,EAERA,UANY;AAOf9C,EAAAA,gBAAgB,EAAE1B,SAAS,CAACuE,IAAV,CAAeC,UAPlB;AAQfnC,EAAAA,eAAe,EAAErC,SAAS,CAACuE,IAAV,CAAeC,UARjB;AASf7C,EAAAA,KAAK,EAAE3B,SAAS,CAAC0E,MAAV,CAAiBF,UATT;AAUfhD,EAAAA,UAAU,EAAExB,SAAS,CAACyE,MAAV,CAAiBD;AAVd,CAAjB;;AAaA,MAAMG,kBAAkB,GAAIC,QAAD,KAAe;AACxClD,EAAAA,gBAAgB,EAAGoB,SAAD,IAAe8B,QAAQ,CAAC1E,cAAc,CAAC4C,SAAD,CAAf,CADD;AAExCT,EAAAA,eAAe,EAAE,MAAMuC,QAAQ,CAACzE,gBAAgB,EAAjB;AAFS,CAAf,CAA3B;;AAKA,MAAM0E,eAAe,GAAIpE,KAAD,KAAY;AAClCqE,EAAAA,SAAS,EAAErE,KAAK,CAACsE,IAAN,CAAWD,SADY;AAElChC,EAAAA,SAAS,EAAErC,KAAK,CAACsE,IAAN,CAAWjC,SAAX,CAAqBkC,OAFE;AAGlCrD,EAAAA,KAAK,EAAElB,KAAK,CAACwE,KAAN,CAAYtD,KAHe;AAIlCH,EAAAA,UAAU,EAAEf,KAAK,CAACsE,IAAN,CAAWvD;AAJW,CAAZ,CAAxB;;AAOA,eAAevB,OAAO,CAAC4E,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CrE,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, updateAssertions } from '../actions';\nimport GameHeader from '../components/GameHeader';\nimport { setStorage } from '../services';\nimport '../style/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestion: 0,\n      nextQuestion: false,\n      disabledTimeOut: false,\n      timer: 30,\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.disableQuestion = this.disableQuestion.bind(this);\n  }\n\n  async componentDidMount() {\n    this.timeOut();\n    const mockData = {\n      player: {\n        score: 0,\n        assertions: 0,\n      },\n    };\n    setStorage('state', mockData);\n    const { requestQuestions, token } = this.props;\n    await requestQuestions(token);\n  }\n\n  shuffle(answers) {\n    for (let i = answers.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n\n  handleAnswer({ target: { name } }) {\n    const { assertionAction } = this.props;\n    const answerButtons = document.querySelectorAll('.hidden');\n    answerButtons.forEach((button) => button.classList.remove('hidden'));\n    if (name === 'correct') {\n      assertionAction();\n    }\n    this.setState({\n      nextQuestion: true,\n    });\n  }\n\n  handleNext() {\n    const { questions, history, assertions } = this.props;\n    const { currentQuestion } = this.state;\n    const mockData = {\n      player: {\n        score: assertions,\n        assertions,\n      },\n    };\n    setStorage('state', mockData);\n    if (currentQuestion !== questions.length - 1) {\n      this.setState((prevSate) => ({\n        currentQuestion: prevSate.currentQuestion + 1,\n        nextQuestion: false,\n      }));\n    } else {\n      history.push('/feedbacks');\n    }\n  }\n\n  disableQuestion() {\n    const { timer } = this.state;\n    if (timer <= 0) {\n      this.setState({ disabledTimeOut: true });\n    }\n  }\n\n  timeOut() {\n    const ONE_SEC = 1000;\n    setInterval(() => {\n      this.setState(\n        (state) => ({\n          timer: state.timer - 1,\n        }),\n        this.disableQuestion,\n      );\n    }, ONE_SEC);\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { currentQuestion, nextQuestion, timer, disabledTimeOut } = this.state;\n    if (questions === undefined) return <p>Loading...</p>;\n    const question = questions[currentQuestion];\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = question;\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const taggedAnswers = question.type !== 'boolean' ? [{\n      correct: true,\n      answer: answers[0],\n    },\n    {\n      correct: false,\n      answer: answers[1],\n      index: 0,\n    },\n    {\n      correct: false,\n      answer: answers[2],\n      index: 1,\n    },\n    {\n      correct: false,\n      answer: answers[3],\n      index: 2,\n    }]\n      : [{\n        correct: true,\n        answer: answers[0],\n      },\n      {\n        correct: false,\n        answer: answers[1],\n        index: 0,\n      }];\n    const randomAnswers = this.shuffle(taggedAnswers);\n    return (\n      <div>\n        <GameHeader />\n        <div key={ question.question }>\n          <h4 key={ question.category } data-testid=\"question-category\">\n            {question.category}\n          </h4>\n          <h3 data-testid=\"question-text\">\n            {question.question}\n          </h3>\n          {randomAnswers.map((answer) => (\n            <button\n              className={ `hidden ${answer.correct ? 'rightGreen' : 'wrongRed'}` }\n              type=\"button\"\n              key={ answer.answer }\n              name={ answer.correct\n                ? 'correct'\n                : 'wrong' }\n              data-testid={ answer.correct\n                ? 'correct-answer'\n                : `wrong-answer-${answer.index}` }\n              onClick={ (e) => this.handleAnswer(e) }\n              disabled={ disabledTimeOut }\n            >\n              {answer.answer}\n\n            </button>\n          ))}\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ this.handleNext }\n            style={ nextQuestion ? { visibility: 'visible' } : { visibility: 'hidden' } }\n          >\n            Próxima pergunta\n          </button>\n          {!disabledTimeOut && timer}\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  questions: PropTypes.shape({\n    length: PropTypes.number.isRequired,\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  assertionAction: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (questions) => dispatch(fetchQuestions(questions)),\n  assertionAction: () => dispatch(updateAssertions()),\n});\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.game.isLoading,\n  questions: state.game.questions.results,\n  token: state.login.token,\n  assertions: state.game.assertions,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}